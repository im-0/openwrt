From e7abe158cf1c97062ea95ee6338e2b3b73cb5335 Mon Sep 17 00:00:00 2001
From: Danila Romanov <pervokur@gmail.com>
Date: Sat, 11 Jan 2025 17:06:57 +0300
Subject: [PATCH] net: mediatek: Add jumbo frame support

    net: mtk_eth_soc: add jumbo frame support

    Signed-off-by: Danila Romanov <pervokur@gmail.com>
---
 drivers/net/ethernet/mediatek/mtk_eth_soc.c | 148 +++++++++++++++-----
 drivers/net/ethernet/mediatek/mtk_eth_soc.h |   7 +
 2 files changed, 117 insertions(+), 38 deletions(-)

--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.c
+++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.c
@@ -557,6 +557,51 @@ static bool mtk_check_gmac23_idle(struct
 	return false;
 }
 
+static void mtk_set_mcr_max_rx(struct mtk_mac *mac, u32 val)
+{
+	struct mtk_eth *eth = mac->hw;
+	u32 mcr_cur, mcr_new;
+
+	if (MTK_HAS_CAPS(eth->soc->caps, MTK_SOC_MT7628))
+		return;
+
+	if (mtk_interface_mode_is_xgmii(mac->interface) && mac->id != MTK_GMAC1_ID) {
+		mcr_cur = mtk_r32(mac->hw, MTK_XMAC_RX_CFG2(mac->id));
+		mcr_new = mcr_cur & ~MTK_XMAC_MAX_RX_MASK;
+
+		if (val < MTK_MAX_RX_LENGTH_15K)
+			mcr_new |= val;
+		else
+			mcr_new |= MTK_MAX_RX_LENGTH_15K;
+
+		if (mcr_new != mcr_cur)
+			mtk_w32(mac->hw, mcr_new, MTK_XMAC_RX_CFG2(mac->id));
+	} else {
+		mcr_cur = mtk_r32(mac->hw, MTK_MAC_MCR(mac->id));
+		mcr_new = mcr_cur & ~(MAC_MCR_MAX_RX_MASK | MAC_MCR_MAX_RX_JUMBO(0xf));
+
+		if (val <= 1518)
+			mcr_new |= MAC_MCR_MAX_RX(MAC_MCR_MAX_RX_1518);
+		else if (val <= 1536)
+			mcr_new |= MAC_MCR_MAX_RX(MAC_MCR_MAX_RX_1536);
+		else if (val <= 1552)
+			mcr_new |= MAC_MCR_MAX_RX(MAC_MCR_MAX_RX_1552);
+		else if (val <= 2048) {
+			mcr_new |= MAC_MCR_MAX_RX(MAC_MCR_MAX_RX_2048);
+			mcr_new |= MAC_MCR_MAX_RX_JUMBO(2);
+		} else if (val <= 9216) {
+			mcr_new |= MAC_MCR_MAX_RX(MAC_MCR_MAX_RX_2048);
+			mcr_new |= MAC_MCR_MAX_RX_JUMBO(9);
+		} else {
+			mcr_new |= MAC_MCR_MAX_RX(MAC_MCR_MAX_RX_2048);
+			mcr_new |= MAC_MCR_MAX_RX_JUMBO(15);
+		}
+
+		if (mcr_new != mcr_cur)
+			mtk_w32(mac->hw, mcr_new, MTK_MAC_MCR(mac->id));
+	}
+}
+
 static struct phylink_pcs *mtk_mac_select_pcs(struct phylink_config *config,
 					      phy_interface_t interface)
 {
@@ -597,6 +642,7 @@ static void mtk_mac_config(struct phylin
 	struct mtk_mac *mac = container_of(config, struct mtk_mac,
 					   phylink_config);
 	struct mtk_eth *eth = mac->hw;
+	struct net_device *dev = eth->netdev[mac->id];
 	int val, ge_mode, err = 0;
 	u32 i;
 
@@ -719,6 +765,7 @@ static void mtk_mac_config(struct phylin
 	}
 
 	/* Setup gmac */
+	mtk_set_mcr_max_rx(mac, dev->mtu + MTK_RX_ETH_HLEN);
 	if (mtk_is_netsys_v3_or_greater(eth)) {
 		if (mtk_interface_mode_is_xgmii(state->interface)) {
 			mtk_w32(mac->hw, MTK_GDMA_XGDM_SEL, MTK_GDMA_EG_CTRL(mac->id));
@@ -1245,22 +1292,22 @@ static void mtk_get_stats64(struct net_d
 	storage->tx_dropped = dev->stats.tx_dropped;
 }
 
-static inline int mtk_max_frag_size(int mtu)
+static inline int mtk_max_frag_size(int mtu, int max_rx_length)
 {
-	/* make sure buf_size will be at least MTK_MAX_RX_LENGTH */
-	if (mtu + MTK_RX_ETH_HLEN < MTK_MAX_RX_LENGTH_2K)
-		mtu = MTK_MAX_RX_LENGTH_2K - MTK_RX_ETH_HLEN;
+	/* make sure buf_size will be at least max_rx_length */
+	if (mtu + MTK_RX_ETH_HLEN < max_rx_length)
+		mtu = max_rx_length - MTK_RX_ETH_HLEN;
 
 	return SKB_DATA_ALIGN(MTK_RX_HLEN + mtu) +
 		SKB_DATA_ALIGN(sizeof(struct skb_shared_info));
 }
 
-static inline int mtk_max_buf_size(int frag_size)
+static inline int mtk_max_buf_size(int frag_size, int max_rx_length)
 {
 	int buf_size = frag_size - NET_SKB_PAD - NET_IP_ALIGN -
 		       SKB_DATA_ALIGN(sizeof(struct skb_shared_info));
 
-	WARN_ON(buf_size < MTK_MAX_RX_LENGTH_2K);
+	WARN_ON(buf_size < max_rx_length);
 
 	return buf_size;
 }
@@ -1284,9 +1331,8 @@ static bool mtk_rx_get_desc(struct mtk_e
 	return true;
 }
 
-static void *mtk_max_lro_buf_alloc(gfp_t gfp_mask)
+static void *mtk_max_buf_alloc(unsigned int size, gfp_t gfp_mask)
 {
-	unsigned int size = mtk_max_frag_size(MTK_MAX_LRO_RX_LENGTH);
 	unsigned long data;
 
 	data = __get_free_pages(gfp_mask | __GFP_COMP | __GFP_NOWARN,
@@ -2276,7 +2322,7 @@ static int mtk_poll_rx(struct napi_struc
 			if (ring->frag_size <= PAGE_SIZE)
 				new_data = napi_alloc_frag(ring->frag_size);
 			else
-				new_data = mtk_max_lro_buf_alloc(GFP_ATOMIC);
+				new_data = mtk_max_buf_alloc(ring->frag_size, GFP_ATOMIC);
 
 			if (unlikely(!new_data)) {
 				netdev->stats.rx_dropped++;
@@ -2791,8 +2837,8 @@ static int mtk_rx_alloc(struct mtk_eth *
 		rx_dma_size = soc->rx.dma_size;
 	}
 
-	ring->frag_size = mtk_max_frag_size(rx_data_len);
-	ring->buf_size = mtk_max_buf_size(ring->frag_size);
+	ring->frag_size = mtk_max_frag_size(rx_data_len, eth->max_rx_length);
+	ring->buf_size = mtk_max_buf_size(ring->frag_size, eth->max_rx_length);
 	ring->data = kcalloc(rx_dma_size, sizeof(*ring->data),
 			     GFP_KERNEL);
 	if (!ring->data)
@@ -2842,7 +2888,7 @@ static int mtk_rx_alloc(struct mtk_eth *
 			if (ring->frag_size <= PAGE_SIZE)
 				data = netdev_alloc_frag(ring->frag_size);
 			else
-				data = mtk_max_lro_buf_alloc(GFP_KERNEL);
+				data = mtk_max_buf_alloc(ring->frag_size, GFP_KERNEL);
 
 			if (!data)
 				return -ENOMEM;
@@ -4007,30 +4053,6 @@ static void mtk_dim_tx(struct work_struc
 	dim->state = DIM_START_MEASURE;
 }
 
-static void mtk_set_mcr_max_rx(struct mtk_mac *mac, u32 val)
-{
-	struct mtk_eth *eth = mac->hw;
-	u32 mcr_cur, mcr_new;
-
-	if (MTK_HAS_CAPS(eth->soc->caps, MTK_SOC_MT7628))
-		return;
-
-	mcr_cur = mtk_r32(mac->hw, MTK_MAC_MCR(mac->id));
-	mcr_new = mcr_cur & ~MAC_MCR_MAX_RX_MASK;
-
-	if (val <= 1518)
-		mcr_new |= MAC_MCR_MAX_RX(MAC_MCR_MAX_RX_1518);
-	else if (val <= 1536)
-		mcr_new |= MAC_MCR_MAX_RX(MAC_MCR_MAX_RX_1536);
-	else if (val <= 1552)
-		mcr_new |= MAC_MCR_MAX_RX(MAC_MCR_MAX_RX_1552);
-	else
-		mcr_new |= MAC_MCR_MAX_RX(MAC_MCR_MAX_RX_2048);
-
-	if (mcr_new != mcr_cur)
-		mtk_w32(mac->hw, mcr_new, MTK_MAC_MCR(mac->id));
-}
-
 static void mtk_hw_reset(struct mtk_eth *eth)
 {
 	u32 val;
@@ -4363,8 +4385,6 @@ static int mtk_hw_init(struct mtk_eth *e
 			continue;
 
 		mtk_w32(eth, MAC_MCR_FORCE_LINK_DOWN, MTK_MAC_MCR(i));
-		mtk_set_mcr_max_rx(netdev_priv(dev),
-				   dev->mtu + MTK_RX_ETH_HLEN);
 	}
 
 	/* Indicates CDM to parse the MTK special tag from CPU
@@ -4489,11 +4509,40 @@ static void mtk_uninit(struct net_device
 	mtk_rx_irq_disable(eth, ~0);
 }
 
+static int mtk_get_max_mtu(struct mtk_eth *eth, int skip_mac_id, int max_mtu)
+{
+	int i;
+
+	for (i = 0; i < MTK_MAX_DEVS; i++) {
+		if (!eth->netdev[i] || i == skip_mac_id)
+			continue;
+		max_mtu = max_t(int, max_mtu, eth->netdev[i]->mtu);
+	}
+
+	return max_mtu;
+}
+
+static inline int mtk_get_mtu_range(int rx_length)
+{
+	if (rx_length <= MTK_MAX_RX_LENGTH)
+		return MTK_MAX_RX_LENGTH;
+	else if (rx_length <= MTK_MAX_RX_LENGTH_2K)
+		return MTK_MAX_RX_LENGTH_2K;
+	else if (rx_length <= MTK_PP_MAX_BUF_SIZE)
+		return MTK_PP_MAX_BUF_SIZE;
+	else if	(rx_length <= MTK_MAX_RX_LENGTH_9K)
+		return MTK_MAX_RX_LENGTH_9K;
+
+	return MTK_MAX_RX_LENGTH_15K;
+}
+
 static int mtk_change_mtu(struct net_device *dev, int new_mtu)
 {
 	int length = new_mtu + MTK_RX_ETH_HLEN;
 	struct mtk_mac *mac = netdev_priv(dev);
 	struct mtk_eth *eth = mac->hw;
+	int cur_max_rx_length, cur_max_mtu;
+	bool need_update = false;
 
 	if (rcu_access_pointer(eth->prog) &&
 	    length > MTK_PP_MAX_BUF_SIZE) {
@@ -4501,6 +4550,27 @@ static int mtk_change_mtu(struct net_dev
 		return -EINVAL;
 	}
 
+	if (mtk_get_mtu_range(length) > eth->max_rx_length) {
+		eth->max_rx_length = mtk_get_mtu_range(length);
+		need_update = true;
+		goto out;
+	}
+
+	cur_max_mtu = mtk_get_max_mtu(eth, mac->id, new_mtu);
+	cur_max_rx_length = mtk_get_mtu_range(cur_max_mtu + MTK_RX_ETH_HLEN);
+	if (eth->max_rx_length > cur_max_rx_length) {
+		eth->max_rx_length = cur_max_rx_length;
+		need_update = true;
+	}
+
+out:
+	if (need_update) {
+		if (netif_running(dev))
+			mtk_stop(dev);
+		if (netif_running(dev))
+			mtk_open(dev);
+	}
+
 	mtk_set_mcr_max_rx(mac, length);
 	dev->mtu = new_mtu;
 
@@ -5224,6 +5294,8 @@ static int mtk_add_mac(struct mtk_eth *e
 
 	if (MTK_HAS_CAPS(eth->soc->caps, MTK_SOC_MT7628))
 		eth->netdev[id]->max_mtu = MTK_MAX_RX_LENGTH - MTK_RX_ETH_HLEN;
+	else if (mtk_is_netsys_v2_or_greater(eth))
+		eth->netdev[id]->max_mtu = MTK_MAX_RX_LENGTH_15K - MTK_RX_ETH_HLEN;
 	else
 		eth->netdev[id]->max_mtu = MTK_MAX_RX_LENGTH_2K - MTK_RX_ETH_HLEN;
 
--- a/drivers/net/ethernet/mediatek/mtk_eth_soc.h
+++ b/drivers/net/ethernet/mediatek/mtk_eth_soc.h
@@ -30,6 +30,8 @@
 #define MTK_QDMA_PAGE_SIZE	2048
 #define MTK_MAX_RX_LENGTH	1536
 #define MTK_MAX_RX_LENGTH_2K	2048
+#define MTK_MAX_RX_LENGTH_9K	9216
+#define MTK_MAX_RX_LENGTH_15K	15360
 #define MTK_TX_DMA_BUF_LEN	0x3fff
 #define MTK_TX_DMA_BUF_LEN_V2	0xffff
 #define MTK_QDMA_RING_SIZE	2048
@@ -471,6 +473,7 @@
 
 /* Mac control registers */
 #define MTK_MAC_MCR(x)		(0x10100 + (x * 0x100))
+#define MAC_MCR_MAX_RX_JUMBO(x)	FIELD_PREP(GENMASK(31, 28), x)
 #define MAC_MCR_MAX_RX_MASK	GENMASK(25, 24)
 #define MAC_MCR_MAX_RX(_x)	(MAC_MCR_MAX_RX_MASK & ((_x) << 24))
 #define MAC_MCR_MAX_RX_1518	0x0
@@ -543,6 +546,9 @@
 #define XMAC_MCR_FORCE_TX_FC	BIT(5)
 #define XMAC_MCR_FORCE_RX_FC	BIT(4)
 
+#define MTK_XMAC_RX_CFG2(x)	(MTK_XMAC_MCR(x) + 0xd0)
+#define MTK_XMAC_MAX_RX_MASK	GENMASK(13, 0)
+
 /* XFI Mac logic reset registers */
 #define MTK_XMAC_LOGIC_RST(x)	(MTK_XMAC_BASE(x) + 0x10)
 #define XMAC_LOGIC_RST		BIT(0)
@@ -1423,6 +1429,7 @@ struct mtk_eth {
 	struct dim			tx_dim;
 
 	int				ip_align;
+	int				max_rx_length;
 
 	struct metadata_dst		*dsa_meta[MTK_MAX_DSA_PORTS];
 
